#################################################################################################
#  Copyright (c) 2014, NVIDIA CORPORATION. All rights reserved.
#
#  NVIDIA CORPORATION and its licensors retain all intellectual property
#  and proprietary rights in and to this software, related documentation
#  and any modifications thereto. Any use, reproduction, disclosure or
#  distribution of this software and related documentation without an express
#  license agreement from NVIDIA CORPORATION is strictly prohibited.
#################################################################################################

# Make sure shell is valid
SHELL = /bin/sh

# Clear out the suffixes and set to suffixes that this make file uses
.SUFFIXES:
.SUFFIXES: .cpp .o

DL_DIR=..

# Include the basic GCC config
include $(DL_DIR)/../../ic-code/ic-gcc-config.mak

# IC Code dir
ICSRCDIR     = $(DL_DIR)/../../ic-code

# Dir to look for source
vpath %.cpp $(DL_DIR)/private
vpath %.cpp $(ICSRCDIR)

# Check whether a debug or release build
ifeq ($(BUILD), debug)
MYFLAGS      = -g -g3 -O0
OBJDIR       = $(DL_DIR)/build/obj/$(TARGET_NAME)/dev
else
MYFLAGS      = -O2 -fno-strict-aliasing
OBJDIR       = $(DL_DIR)/build/obj/$(TARGET_NAME)/rel
endif
MYFLAGS     += -Wall -c -DICERA_EXPORTS
ARFLAGS = -cr

# Include dirs
INCLUDEDIRS  = -I$(ICSRCDIR)
INCLUDEDIRS += -I$(DL_DIR)/public

ifeq ($(BITS),64)
    BITFLAGS  = -m64
    BITNAME   = 64
else
    BITFLAGS  = -m32
    BITNAME   = 32
endif

    MYFLAGS  += $(BITFLAGS)
    LDFLAGS  += $(BITFLAGS) -shared

ifeq ($(ARCH),arm)
    MYFLAGS  += -mthumb
    LDFLAGS  += -Wl,--fix-cortex-a8
endif

ifeq ($(OS),chrome)
# Chrome OS build
ifeq ($(ARCH),arm)
# Chrome OS ARM build
    CXX       = armv7a-cros-linux-gnueabi-g++
    CC        = armv7a-cros-linux-gnueabi-gcc
    INCLUDEDIRS += -I/build/arm-generic/usr/include/
    LIBDIRS   = -L/usr/armv7a-cros-linux-gnueabi/usr/lib -L/build/arm-generic/usr/lib
    OSARCH    = ca
    BITFLAGS  =
else
# Chrome OS x86 build
ifeq ($(BITS),64)
    CXX       = x86_64-cros-linux-gnu-g++
    CC        = x86_64-cros-linux-gnu-gcc
    INCLUDEDIRS += -I/build/amd64-generic/usr/include/
    LIBDIRS   = -L/usr/x86_64-cros-linux-gnu/usr/lib -L/build/amd64-generic/usr/lib64
else
    CXX       = i686-pc-linux-gnu-g++
    CC        = i686-pc-linux-gnu-gcc
    INCLUDEDIRS += -I/build/x86-generic/usr/include/
    LIBDIRS   = -L/usr/i686-pc-linux-gnu/usr/lib -L/build/x86-generic/usr/lib
endif
    OSARCH    = cx
endif

    LDFLAGS  += -ldl

else ifeq ($(OS),android)
# Android build, currently ARM only
    CXX       = arm-linux-androideabi-g++
    CC        = arm-linux-androideabi-gcc
    BITFLAGS  =

    MYFLAGS  += -DNO_PTHREAD_SETSCHEDPRIO -DIC_NO_TMP -DIC_NO_UDEV -DANDROID

    OSARCH    = aa
else
# Assume linux currently x86 only

    LDFLAGS  += -ldl -ludev
ifneq ($(BITS),64)
    LIBDIRS   = -L/lib/i386-linux-gnu
endif
    OSARCH    = lx
endif

TGTDIR = ../bin/bin.$(OSARCH)$(BITNAME)
OBJDIR = obj/$(OSARCH)$(BITNAME)/$(BUILDTYPE)

ifeq ($(UDEV),no)
    MYFLAGS  += -DIC_NO_UDEV
endif

ifeq ($(STATIC),yes)
    LDFLAGS  += -static
endif

# C++ compiler configuration
ALL_CXXFLAGS = $(INCLUDEDIRS) $(CXXFLAGS) $(MYFLAGS) -Wno-write-strings -fPIC -pthread -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -DIC_NO_WIDE


# Linker configurations
LDFLAGS     += -pthread
ALL_LDFLAGS  = $(LDFLAGS)

TARGET_NAME  = updater$(NAME_EXT).so

# Indicate phony targets i.e. targets that don't produce a file
# with the same name as the target name
.PHONY: all bin clean distclean mkdirs

# Indicate the default all target
all: bin
bin: mkdirs $(TGTDIR)/$(TARGET_NAME)

# geniedox specific lines ###########################################################

# List of source files
CXX_SRC   = \
            Updater.cpp \
            ic-time.cpp \
            ic-string-ascii.cpp \
            ic-string-mb.cpp \
            ic-at-port-util.cpp \
            ic-socket.cpp \
            ic-at-port-socket.cpp \
            ic-serial.cpp \
            ic-at-port.cpp \
            ic-b64.cpp \
            ic-device-detect.cpp \
            ic-device-detect-linux.cpp \
            ic-string-list-ascii.cpp \
            ic-log.cpp \
            ic-file.cpp \
            ic-file-util.cpp \
            ic-sema.cpp \
            ic-thread.cpp \


# List of object files
CXX_OBJ   = $(addprefix $(OBJDIR)/,$(notdir $(CXX_SRC:.cpp=.o)))
ALL_OBJ   = $(CXX_OBJ)

# List of dependency files
CXX_DEPS  = $(addprefix $(OBJDIR)/,$(notdir $(CXX_SRC:.cpp=.d)))
ALL_DEPS  = $(CXX_DEPS)

# Include dependency files generated by GCC
-include $(ALL_DEPS)

# Target to make the object dirs
mkdirs: 
	@if [ ! -e $(TGTDIR) ]; then mkdir -p $(TGTDIR); fi
	@if [ ! -e $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi

# Target to compile CPP files
$(OBJDIR)/%.o : %.cpp
	$(CXX) $(ALL_CXXFLAGS) -o $@ $<

# Main target
$(TGTDIR)/$(TARGET_NAME) : $(ALL_OBJ)
	$(CXX) $(ALL_OBJ) $(ALL_LDFLAGS) -o $@ -lm

# Clean target
clean : 
	@rm --force $(ALL_OBJ) $(TGTDIR)/$(TARGET_NAME)
        
# More extensive clean target
distclean : clean distcleanlibs
	@rm --force $(TGTDIR)/$(TARGET_NAME)
	@rm --force $(DL_DIR)/build/obj/rel/* $(DL_DIR)/build/obj/dev/* $(ALL_DEPS)
	@if [ -e $(DL_DIR)/build/obj/dev ]; then rmdir --ignore-fail-on-non-empty $(DL_DIR)/build/obj/dev; fi
	@if [ -e $(DL_DIR)/build/obj/rel ]; then rmdir --ignore-fail-on-non-empty $(DL_DIR)/build/obj/rel; fi
	@if [ -e $(DL_DIR)/build/obj ]; then rmdir --ignore-fail-on-non-empty $(DL_DIR)/build/obj; fi




